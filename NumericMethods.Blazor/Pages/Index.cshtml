@page "/"


<div class="container">
    <div class="jumbotron text-center">
        <h1>Matrix calc</h1>
        <h8>
            #19 - 14 variant
        </h8>
        <h7>
            Приведення до нижнього дводіагонального вигляду перетвореннями
            Хаусхолдера
        </h7>
    </div>
    <div class="my-3">
        <div class="btn btn-secondary btn-file">
            Import from CSV <input type="file" onchange="handleFileSelect(this.files);" />
        </div>
    </div>
    <Matrix Value="@matrix" ValueChanged="@((m) => matrix = (int[,])m)"></Matrix>
    <div class="my-3">
        <div class="btn btn-primary" onclick="@PerformLower">
            Perform SVD process (with lower two diagonal)
        </div>
    </div>
    <div class="my-3">
        <div class="btn btn-primary" onclick="@PerformHigher">
            Perform SVD process (with higher two diagonal)
        </div>
    </div>
    @if (output != null)
    {
        <ReadonlySvdProcess output="output"></ReadonlySvdProcess>
    }
</div>

@functions {
    int[,] matrix = new int[4, 3] { { 1, -1, 2}, {3, 1, 3}, { 1, -2, 5}, { 0, 4, 3}};
    SvdProcessOutput output;

    protected override void OnInit()
    {
        base.OnInit();
        CsvImport.OnImport += ExportCsv;
    }

    void ExportCsv(object sender, CsvImport import)
    {
        if(import.Result.GetLength(0) < 3 || import.Result.GetLength(1) < 3)
        {
            RegisteredFunction.Invoke<bool>("Alert", "This tool does not support matrices with dimension < 3");
            return;
        }

        matrix = import.Result;
        this.output = null;
        this.StateHasChanged();
    }

    void PerformLower()
    {
        double[,] dst = new double[matrix.GetLength(0), matrix.GetLength(1)];
        Array.Copy(matrix, dst, matrix.Length);
        output = SvdProcess.CreateLowerTwoDiagonal().Perform(Matrix<double>.Build.DenseOfArray(dst));
    }

    void PerformHigher()
    {
        double[,] dst = new double[matrix.GetLength(0), matrix.GetLength(1)];
        Array.Copy(matrix, dst, matrix.Length);
        output = SvdProcess.CreateHigherTwoDiagonal().Perform(Matrix<double>.Build.DenseOfArray(dst));
    }
}

