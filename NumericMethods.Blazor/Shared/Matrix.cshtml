
<div class="row">
    <div class="col-md-6">
        <div class="form-group">
            <button class="btn btn-primary" onclick="@AddColumn">Add Column</button>
            <button class="btn btn-primary" onclick="@AddRow">Add Row</button>
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-group float-right">
            <button class="btn btn-danger" onclick="@RemoveColumn">Remove Column</button>
            <button class="btn btn-danger" onclick="@RemoveRow">Remove Row</button>
        </div>
    </div>
</div>

<table>
    @for (var r = 0; r < Value.GetLength(0); r++)
    {
        var row = r;
        <tr>
            @for (var c = 0; c < Value.GetLength(1); c++)
             {
                var col = c;
                <td><input type="number" class="form-control" bind="@Value[row, col]" /></td>
            }
        </tr>

    }
</table>


@functions  {
    [ParameterAttribute]
    private int[,] Value { get; set; } = new int[0, 0];

    [ParameterAttribute]
    private Action<int[,]> ValueChanged { get; set; }

    void AddRow()
    {
        Expand(Value.GetLength(0) + 1, Value.GetLength(1));
        ValueChanged(Value);
    }
    void RemoveRow()
    {
        if (Value.GetLength(0) == 3)
        {
            RegisteredFunction.Invoke<bool>("Alert", "This tool does not support matrices with dimension < 3");
            return;
        }

        Compress(Value.GetLength(0) - 1, Value.GetLength(1));
        ValueChanged(Value);
    }

    void AddColumn()
    {
        Expand(Value.GetLength(0), Value.GetLength(1) + 1);
        ValueChanged(Value);
    }

    void RemoveColumn()
    {
        if (Value.GetLength(1) == 3)
        {
            RegisteredFunction.Invoke<bool>("Alert", "This tool does not support matrices with dimension < 3");
            return;
        }
        Compress(Value.GetLength(0), Value.GetLength(1) - 1);
        ValueChanged(Value);
    }

    void Expand(int newRows, int newCols)
    {
        var newMatrix = new int[newRows, newCols];
        for (int r = 0; r < newRows; r++)
        {
            for (int c = 0; c < newCols; c++)
            {
                newMatrix[r, c] = 1;
            }
        }
        Array.Copy(Value, newMatrix, Value.Length);
        Value = newMatrix;
    }

    void Compress(int newRows, int newCols)
    {
        var newMatrix = new int[newRows, newCols];
        Array.Copy(Value, newMatrix, newRows * newCols);
        Value = newMatrix;
    }
}